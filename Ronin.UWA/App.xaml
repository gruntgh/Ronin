<Application
    x:Class="Ronin.UWA.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
     xmlns:converters="using:Ronin.UWA.Converters"
      xmlns:extensions="using:Microsoft.Toolkit.Uwp.UI.Extensions"
    xmlns:local="using:Ronin.UWA"
    RequestedTheme="Light">
    <Application.Resources>
        <Style x:Key="ValidationError" TargetType="TextBox">
            <Setter Property="Background" Value="Red" />
        </Style>
        <converters:BoolStringConverter x:Key="BoolStringConverter" x:Name="BoolStringConverter" />
        <converters:NegationConverter x:Key="NegationConverter" x:Name="NegationConverter" />
        <ControlTemplate x:Key="ValidableTextBox" TargetType="TextBox">
            <Grid>
                
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CustomStates">

                        <VisualState>
                            <VisualState.StateTriggers>
                                <StateTrigger IsActive="{TemplateBinding IsReadOnly}" />
                            </VisualState.StateTriggers>
                            <VisualState.Setters>
                                <Setter Target="MainTextBox.Style"  Value="{StaticResource ValidationError}" />

                            </VisualState.Setters>
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <!--Binding RelativeSource={ RelativeSource Self}, Path=(extensions:TextBoxRegex.IsValid), Converter={StaticResource BoolStringConverter}}-->
                <TextBox Text="{TemplateBinding Text}"                
                    Header="{Binding RelativeSource={ RelativeSource Self}, Path=(extensions:TextBoxRegex.IsValid)}" 
                     PlaceholderText="{TemplateBinding PlaceholderText}" 
                     extensions:TextBoxRegex.ValidationMode="{TemplateBinding extensions:TextBoxRegex.ValidationMode}"
                 extensions:TextBoxRegex.ValidationType="{TemplateBinding extensions:TextBoxRegex.ValidationMode}"
               x:Name="MainTextBox"  
                 >
                    
                </TextBox>
                <TextBlock Text="{TemplateBinding IsReadOnly}"></TextBlock>
            </Grid>
        </ControlTemplate>


        <ControlTemplate x:Key="CheckBoxTemplate1" TargetType="CheckBox">
            <Border BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}" 
            Background="{TemplateBinding Background}">

                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CheckStates">
                        <VisualState x:Name="Checked">
                            <VisualState.Setters>
                                <Setter Target="CheckGlyph.Opacity" Value="1"/>
                            </VisualState.Setters>
                            <!-- This Storyboard is equivalent to the Setter. -->
                            <!--<Storyboard>
                        <DoubleAnimation Duration="0" To="1" 
                         Storyboard.TargetName="CheckGlyph" Storyboard.TargetProperty="Opacity"/>
                    </Storyboard>-->
                        </VisualState>
                        <VisualState x:Name="Unchecked"/>
                        <VisualState x:Name="Indeterminate">
                            <VisualState.Setters>
                                <Setter Target="IndeterminateGlyph.Opacity" Value="1"/>
                            </VisualState.Setters>
                            <!-- This Storyboard is equivalent to the Setter. -->
                            <!--<Storyboard>
                        <DoubleAnimation Duration="0" To="1"
                         Storyboard.TargetName="IndeterminateGlyph" Storyboard.TargetProperty="Opacity"/>
                    </Storyboard>-->
                        </VisualState>
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>

                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="25"/>
                    </Grid.RowDefinitions>
                    <Rectangle x:Name="NormalRectangle" Fill="Transparent" Height="20" Width="20" 
                       Stroke="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" 
                       StrokeThickness="{ThemeResource CheckBoxBorderThemeThickness}" 
                       UseLayoutRounding="False"/>
                    <!-- Create an X to indicate that the CheckBox is selected. -->
                    <Path x:Name="CheckGlyph" 
                  Data="M103,240 L111,240 119,248 127,240 135,240 123,252 135,264 127,264 119,257 111,264 103,264 114,252 z" 
                  Fill="{ThemeResource CheckBoxForegroundThemeBrush}" 
                  FlowDirection="LeftToRight" 
                  Height="14" Width="16" Opacity="0" Stretch="Fill"/>
                    <Ellipse x:Name="IndeterminateGlyph" 
                     Fill="{ThemeResource CheckBoxForegroundThemeBrush}" 
                     Height="8" Width="8" Opacity="0" UseLayoutRounding="False" />
                    <ContentPresenter x:Name="ContentPresenter" 
                              ContentTemplate="{TemplateBinding ContentTemplate}" 
                              Content="{TemplateBinding Content}" 
                              Margin="{TemplateBinding Padding}" Grid.Row="1" 
                              HorizontalAlignment="Center" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
            </Border>
        </ControlTemplate>

    </Application.Resources>


</Application>
